import tkinter as tk
from tkinter import messagebox, simpledialog
from tkcalendar import DateEntry
from PIL import Image, ImageTk
import csv
import datetime
import os
import sys
import json
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors
APP_TAGLINE = "Effortless Visitor Management for Your Premises"

class NoHighlightButton(tk.Button):
    def __init__(self, parent, **kwargs):
        # Remove any highlight-related properties from kwargs
        kwargs.pop('relief', None)
        kwargs.pop('highlightthickness', None)
        kwargs.pop('activebackground', None)
        kwargs.pop('activeforeground', None)
        kwargs.pop('highlightbackground', None)
        kwargs.pop('overrelief', None)
        kwargs.pop('takefocus', None)
        kwargs.pop('cursor', None)
        
        super().__init__(parent, **kwargs)
        
        # Configure to remove all highlights
        self.configure(
            relief="flat",
            highlightthickness=0,
            bd=0,
            takefocus=0,
            cursor="arrow"
        )
        
        # Bind events to prevent any visual feedback
        self.bind('<Enter>', self._on_enter)
        self.bind('<Leave>', self._on_leave)
        self.bind('<FocusIn>', self._on_focus_in)
        self.bind('<FocusOut>', self._on_focus_out)
    
    def _on_enter(self, event):
        # Do nothing on mouse enter
        pass
    
    def _on_leave(self, event):
        # Do nothing on mouse leave
        pass
    
    def _on_focus_in(self, event):
        # Do nothing on focus in
        pass
    
    def _on_focus_out(self, event):
        # Do nothing on focus out
        pass

def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

class VisitorManagementApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Visitor Management System")
        self.root.geometry("800x600")
        self.root.minsize(700, 500)  # Set minimum window size
        
        # Theme management
        self.current_theme = "light"
        self.themes = {
            "light": {
                "bg": "#f0f4ff",
                "fg": "#2c3e50",
                "button_bg": "#6fa8dc",
                "button_fg": "white",
                "entry_bg": "white",
                "entry_fg": "black"
            },
            "dark": {
                "bg": "#1a1a1a",
                "fg": "#ffffff",
                "button_bg": "#4a90e2",
                "button_fg": "white",
                "entry_bg": "#2d2d2d",
                "entry_fg": "#ffffff"
            }
        }
        
        self.admin_password = "admin123"
        self.frames = {}
        self.is_admin_logged_in = False
        self.current_frame = None

        self.init_splash_screen()
        self.init_welcome_screen()
        self.init_main_screen()
        self.init_search_screen()
        self.init_result_screen()
        self.init_confirmation_screen()
        self.init_settings_screen()
        self.init_clock()

        self.show_frame("Splash")

    def get_theme_color(self, color_type):
        return self.themes[self.current_theme][color_type]

    def apply_theme(self):
        theme = self.themes[self.current_theme]
        self.root.configure(bg=theme["bg"])
        
        # Apply theme to all frames
        for frame in self.frames.values():
            frame.configure(bg=theme["bg"])
            for widget in frame.winfo_children():
                if hasattr(widget, 'configure'):
                    try:
                        if isinstance(widget, tk.Entry):
                            widget.configure(bg=theme["entry_bg"], fg=theme["entry_fg"])
                        elif isinstance(widget, tk.Button):
                            widget.configure(bg=theme["button_bg"], fg=theme["button_fg"])
                        elif isinstance(widget, tk.Label):
                            widget.configure(bg=theme["bg"], fg=theme["fg"])
                        elif isinstance(widget, tk.Text):
                            widget.configure(bg=theme["entry_bg"], fg=theme["entry_fg"])
                    except:
                        pass

    def init_splash_screen(self):
        frame = tk.Frame(self.root, bg=self.get_theme_color("bg"))
        self.frames["Splash"] = frame

        # Large centered logo
        try:
            logo_image = Image.open(resource_path("assests/quickentry_logo.png.png"))
            logo_image = logo_image.resize((200, 200))
            logo_photo = ImageTk.PhotoImage(logo_image)
            logo_label = tk.Label(frame, image=logo_photo, bg=self.get_theme_color("bg"))
            logo_label.image = logo_photo
            logo_label.pack(expand=True)
        except Exception as e:
            print(f"Splash logo error: {e}")

        # App title
        title_label = tk.Label(frame, text="Effortless Visitor Management for Your Premises", font=("Segoe UI", 18, "bold"), 
                              bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg"))
        title_label.pack(pady=10)

        # Loading text with animation
        self.loading_label = tk.Label(frame, text="Loading", font=("Segoe UI", 10), 
                                     bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg"))
        self.loading_label.pack(pady=20)
        
        # Animated loading dots
        self.animate_loading()

        # Auto transition to welcome screen after 3 seconds
        self.root.after(3000, lambda: self.animate_transition("Welcome"))

    def animate_loading(self):
        dots = ["Loading", "Loading.", "Loading..", "Loading..."]
        def update_dots(index=0):
            self.loading_label.config(text=dots[index])
            next_index = (index + 1) % len(dots)
            self.root.after(500, lambda: update_dots(next_index))
        update_dots()

    def animate_transition(self, target_frame):
        if self.current_frame:
            # Fade out current frame
            self.frames[self.current_frame].pack_forget()
        
        # Fade in new frame
        self.frames[target_frame].pack(fill="both", expand=True)
        self.current_frame = target_frame
        
        # Apply theme to new frame
        self.apply_theme()

    def show_frame(self, name):
        self.animate_transition(name)

    def init_welcome_screen(self):
        frame = tk.Frame(self.root, bg=self.get_theme_color("bg"))
        self.frames["Welcome"] = frame

        try:
            logo_image = Image.open(resource_path("assests/quickentry_logo.png.png"))
            logo_image = logo_image.resize((150, 150))
            logo_photo = ImageTk.PhotoImage(logo_image)
            logo_label = tk.Label(frame, image=logo_photo, bg=self.get_theme_color("bg"))
            logo_label.image = logo_photo
            logo_label.pack(pady=30)
        except Exception as e:
            print(f"Welcome logo error: {e}")


        tk.Button(frame, text="Enter Visitor Log", command=lambda: self.animate_transition("Main"), 
                 width=20, bg=self.get_theme_color("button_bg"), fg=self.get_theme_color("button_fg"), 
                 font=("Segoe UI", 12)).pack(pady=10)

    def init_main_screen(self):
        frame = tk.Frame(self.root, bg=self.get_theme_color("bg"))
        self.frames["Main"] = frame

        # Search Icon (left side, top) - replacing logo
        try:
            search_img = Image.open(resource_path("assests/search-engine-marketing-icon.png.png")).resize((30, 30))
            self.search_icon = ImageTk.PhotoImage(search_img)
            search_label = tk.Label(frame, image=self.search_icon, bg=self.get_theme_color("bg"),
                                   cursor="hand2")
            search_label.place(x=15, y=15)
            search_label.bind("<Button-1>", lambda e: self.animate_transition("Search"))
        except Exception as e:
            print(f"Search icon error: {e}")
            # Fallback text label if image fails
            search_label = tk.Label(frame, text="üîç", font=("Segoe UI", 16), bg=self.get_theme_color("bg"),
                                   cursor="hand2")
            search_label.place(x=15, y=15)
            search_label.bind("<Button-1>", lambda e: self.animate_transition("Search"))

        # 3-dots menu button (right) - using Label instead of Button
        menu_label = tk.Label(frame, text="‚ãÆ", font=("Segoe UI", 20), 
                             bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg"),
                             cursor="hand2")
        menu_label.place(x=750, y=10)
        menu_label.bind("<Button-1>", lambda e: self.show_menu())

        # Clock
        self.clock_label = tk.Label(frame, text="", font=("Courier New", 12, "bold"), 
                                   bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg"))
        self.clock_label.pack(pady=(20, 10))

        # Simple, clean form layout
        form_frame = tk.Frame(frame, bg="#ffffff", relief="solid", bd=1)
        form_frame.pack(pady=20, padx=20, fill="both", expand=True)

        # Header
        header_label = tk.Label(form_frame, text="Visitor Log Register", 
                               font=("Segoe UI", 20, "bold"), 
                               bg="#ffffff", fg="#2c3e50")
        header_label.pack(pady=(20, 30))

        # Form fields in a clean grid
        fields_frame = tk.Frame(form_frame, bg="#ffffff")
        fields_frame.pack(pady=10, padx=30, fill="both", expand=True)

        # Name field
        tk.Label(fields_frame, text="Visitor Name:", font=("Segoe UI", 12, "bold"), 
                bg="#ffffff", fg="#2c3e50").grid(row=0, column=0, sticky="w", pady=(0, 5))
        self.name_entry = tk.Entry(fields_frame, font=("Segoe UI", 11), 
                                  bg="#f8f9fa", fg="#2c3e50", relief="solid", bd=1, width=30)
        self.name_entry.grid(row=0, column=1, sticky="ew", padx=(10, 0), pady=(0, 15))

        # Date field
        tk.Label(fields_frame, text="Date:", font=("Segoe UI", 12, "bold"), 
                bg="#ffffff", fg="#2c3e50").grid(row=1, column=0, sticky="w", pady=(0, 5))
        self.date_entry = DateEntry(fields_frame, width=25, background='#2c3e50', foreground='white', 
                                   date_pattern='dd/mm/yyyy', font=("Segoe UI", 11))
        self.date_entry.grid(row=1, column=1, sticky="w", padx=(10, 0), pady=(0, 15))

        # Time In field
        tk.Label(fields_frame, text="Time In:", font=("Segoe UI", 12, "bold"), 
                bg="#ffffff", fg="#2c3e50").grid(row=2, column=0, sticky="w", pady=(0, 5))
        self.timein_entry = tk.Entry(fields_frame, font=("Segoe UI", 11), 
                                    bg="#f8f9fa", fg="#2c3e50", relief="solid", bd=1, width=30)
        self.timein_entry.grid(row=2, column=1, sticky="ew", padx=(10, 0), pady=(0, 15))

        # Time Out field
        tk.Label(fields_frame, text="Time Out:", font=("Segoe UI", 12, "bold"), 
                bg="#ffffff", fg="#2c3e50").grid(row=3, column=0, sticky="w", pady=(0, 5))
        self.timeout_entry = tk.Entry(fields_frame, state="readonly", font=("Segoe UI", 11), 
                                     bg="#e9ecef", fg="#6c757d", relief="solid", bd=1, width=30)
        self.timeout_entry.grid(row=3, column=1, sticky="ew", padx=(10, 0), pady=(0, 15))

        # Purpose field
        tk.Label(fields_frame, text="Purpose:", font=("Segoe UI", 12, "bold"), 
                bg="#ffffff", fg="#2c3e50").grid(row=4, column=0, sticky="w", pady=(0, 5))
        self.reason_entry = tk.Entry(fields_frame, font=("Segoe UI", 11), 
                                    bg="#f8f9fa", fg="#2c3e50", relief="solid", bd=1, width=30)
        self.reason_entry.grid(row=4, column=1, sticky="ew", padx=(10, 0), pady=(0, 15))

        # Configure grid weights
        fields_frame.columnconfigure(1, weight=1)

        # Buttons in a clean row
        button_frame = tk.Frame(form_frame, bg="#ffffff")
        button_frame.pack(pady=30)

        # Submit button
        submit_btn = tk.Button(button_frame, text="Submit Entry", command=self.submit_entry, 
                              bg="#007bff", fg="white", width=15, font=("Segoe UI", 11, "bold"),
                              relief="flat", bd=0, cursor="hand2")
        submit_btn.pack(side=tk.LEFT, padx=10)

        # Export buttons
        excel_btn = tk.Button(button_frame, text="Export Excel", command=self.export_to_csv, 
                             bg="#28a745", fg="white", width=12, font=("Segoe UI", 10, "bold"),
                             relief="flat", bd=0, cursor="hand2")
        excel_btn.pack(side=tk.LEFT, padx=10)

        pdf_btn = tk.Button(button_frame, text="Export PDF", command=self.export_to_pdf, 
                           bg="#dc3545", fg="white", width=12, font=("Segoe UI", 10, "bold"),
                           relief="flat", bd=0, cursor="hand2")
        pdf_btn.pack(side=tk.LEFT, padx=10)

        # Autofill
        now = datetime.datetime.now()
        self.date_entry.set_date(now.date())
        self.timein_entry.insert(0, now.strftime("%H:%M:%S"))

    def init_search_screen(self):
        frame = tk.Frame(self.root, bg=self.get_theme_color("bg"))
        self.frames["Search"] = frame

        # Top logo (left)
        try:
            logo_img = Image.open(resource_path("assests/quickentry_logo.png.png")).resize((40, 40))
            self.search_logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frame, image=self.search_logo_photo, bg=self.get_theme_color("bg"))
            logo_label.place(x=10, y=10)
        except Exception as e:
            print(f"Search screen logo error: {e}")

        # Centered Heading
        tk.Label(frame, text="Search Visitor Logs", font=("Segoe UI", 18, "bold"), 
                bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg")).place(relx=0.5, y=20, anchor="n")

        # Back button (right)
        back_button = tk.Button(frame, text="‚Üê Back", font=("Segoe UI", 12), bg=self.get_theme_color("bg"), bd=0, 
                               command=lambda: self.animate_transition("Main"), fg=self.get_theme_color("fg"))
        back_button.place(x=700, y=15)

        search_frame = tk.Frame(frame, bg=self.get_theme_color("bg"))
        search_frame.pack(pady=(60, 10))

        self.search_var = tk.StringVar()
        tk.Label(search_frame, text="Search:", bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg"), 
                font=("Segoe UI", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="e")
        tk.Entry(search_frame, textvariable=self.search_var, width=40, font=("Segoe UI", 11), 
                bg=self.get_theme_color("entry_bg"), fg=self.get_theme_color("entry_fg")).grid(row=0, column=1, padx=5, pady=5)
        tk.Button(search_frame, text="Search", command=self.perform_search, 
                 bg="#6fa8dc", fg="white", font=("Segoe UI", 11)).grid(row=0, column=2, padx=5, pady=5)

        # Results label
        tk.Label(frame, text="Search Results:", font=("Segoe UI", 12, "bold"), 
                bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg")).pack(pady=(10, 5))

        self.search_results = tk.Text(frame, height=15, width=90, font=("Segoe UI", 10), 
                                     bg=self.get_theme_color("entry_bg"), fg=self.get_theme_color("entry_fg"))
        self.search_results.pack(pady=10)

    def init_result_screen(self):
        frame = tk.Frame(self.root, bg=self.get_theme_color("bg"))
        self.frames["Result"] = frame

        tk.Label(frame, text="Entry Submitted Successfully", font=("Segoe UI", 14, "bold"), 
                bg=self.get_theme_color("bg"), fg="green").pack(pady=10)
        self.result_text = tk.Text(frame, height=10, width=80, font=("Segoe UI", 10), 
                                   bg=self.get_theme_color("entry_bg"), fg=self.get_theme_color("entry_fg"))
        self.result_text.pack(pady=10)
        tk.Button(frame, text="Back to Entry", command=lambda: self.animate_transition("Main"), 
                 bg="#cfe2f3", fg="black", font=("Segoe UI", 11)).pack(pady=10)

    def init_confirmation_screen(self):
        frame = tk.Frame(self.root, bg=self.get_theme_color("bg"))
        self.frames["Confirm"] = frame

        self.confirm_label = tk.Label(frame, text="", font=("Segoe UI", 14), 
                                     bg=self.get_theme_color("bg"), fg="green")
        self.confirm_label.pack(pady=30)
        tk.Button(frame, text="View Result", command=lambda: self.animate_transition("Result"), 
                 bg="#cfe2f3", fg="black", font=("Segoe UI", 11)).pack()

    def init_settings_screen(self):
        frame = tk.Frame(self.root, bg=self.get_theme_color("bg"))
        self.frames["Settings"] = frame

        # Top logo (left)
        try:
            logo_img = Image.open(resource_path("assests/quickentry_logo.png.png")).resize((40, 40))
            self.settings_logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frame, image=self.settings_logo_photo, bg=self.get_theme_color("bg"))
            logo_label.place(x=10, y=10)
        except Exception as e:
            print(f"Settings logo error: {e}")

        # Centered Heading
        tk.Label(frame, text="Settings", font=("Segoe UI", 18, "bold"), 
                bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg")).place(relx=0.5, y=20, anchor="n")

        # Back button (right)
        back_button = tk.Button(frame, text="‚Üê Back", font=("Segoe UI", 12), bg=self.get_theme_color("bg"), bd=0, 
                               command=lambda: self.animate_transition("Main"), fg=self.get_theme_color("fg"))
        back_button.place(x=700, y=15)

        # Settings content
        settings_frame = tk.Frame(frame, bg=self.get_theme_color("bg"))
        settings_frame.pack(pady=(60, 10))

        # Dark Mode Toggle
        dark_mode_frame = tk.Frame(settings_frame, bg=self.get_theme_color("bg"))
        dark_mode_frame.pack(pady=20)

        tk.Label(dark_mode_frame, text="üåô Dark Mode", font=("Segoe UI", 14, "bold"), 
                bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg")).pack(side=tk.LEFT, padx=10)
        
        self.dark_mode_var = tk.BooleanVar(value=self.current_theme == "dark")
        dark_mode_toggle = tk.Checkbutton(dark_mode_frame, variable=self.dark_mode_var, 
                                         command=self.toggle_dark_mode, bg=self.get_theme_color("bg"))
        dark_mode_toggle.pack(side=tk.LEFT, padx=10)

    def toggle_dark_mode(self):
        self.current_theme = "dark" if self.dark_mode_var.get() else "light"
        self.apply_theme()
        messagebox.showinfo("Theme Changed", f"Switched to {self.current_theme.title()} Mode!")

    def show_menu(self):
        # Create popup menu
        menu = tk.Toplevel(self.root)
        menu.geometry("200x150")
        menu.title("Menu")
        menu.configure(bg=self.get_theme_color("bg"))
        menu.attributes('-topmost', True)
        
        # Position menu near the 3-dots button
        menu.geometry("+650+50")
        
        # Menu items
        if not self.is_admin_logged_in:
            tk.Button(menu, text="Admin Login", command=lambda: [self.show_admin_login(), menu.destroy()], 
                     bg=self.get_theme_color("button_bg"), fg=self.get_theme_color("button_fg"), 
                     font=("Segoe UI", 11), width=15).pack(pady=5)
        else:
            tk.Button(menu, text="Admin Logout", command=lambda: [self.admin_logout(), menu.destroy()], 
                     bg="#e74c3c", fg=self.get_theme_color("button_fg"), font=("Segoe UI", 11), width=15).pack(pady=5)
            tk.Button(menu, text="Search Logs", command=lambda: [self.animate_transition("Search"), menu.destroy()], 
                     bg="#f39c12", fg=self.get_theme_color("button_fg"), font=("Segoe UI", 11), width=15).pack(pady=5)
        
        tk.Button(menu, text="‚öôÔ∏è Settings", command=lambda: [self.animate_transition("Settings"), menu.destroy()], 
                 bg="#9b59b6", fg=self.get_theme_color("button_fg"), font=("Segoe UI", 11), width=15).pack(pady=5)
        tk.Button(menu, text="Close", command=menu.destroy, bg=self.get_theme_color("button_bg"), fg=self.get_theme_color("button_fg"), 
                 font=("Segoe UI", 11), width=15).pack(pady=5)

    def show_admin_login(self):
        # Create admin login popup
        login_window = tk.Toplevel(self.root)
        login_window.geometry("300x200")
        login_window.title("Admin Login")
        login_window.configure(bg=self.get_theme_color("bg"))
        login_window.attributes('-topmost', True)
        
        # Center the window
        login_window.geometry("+250+200")
        
        tk.Label(login_window, text="Admin Login", font=("Segoe UI", 16, "bold"), 
                bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg")).pack(pady=10)
        
        login_frame = tk.Frame(login_window, bg=self.get_theme_color("bg"))
        login_frame.pack(pady=10)
        
        tk.Label(login_frame, text="Password:", bg=self.get_theme_color("bg"), fg=self.get_theme_color("fg"), 
                font=("Segoe UI", 12)).grid(row=0, column=0, padx=10, pady=5, sticky="e")
        password_entry = tk.Entry(login_frame, show="*", font=("Segoe UI", 12), width=15, 
                                  bg=self.get_theme_color("entry_bg"), fg=self.get_theme_color("entry_fg"))
        password_entry.grid(row=0, column=1, padx=10, pady=5)
        password_entry.focus()
        
        def check_admin_login():
            if password_entry.get() == self.admin_password:
                self.is_admin_logged_in = True
                messagebox.showinfo("Success", "Admin login successful!")
                login_window.destroy()
            else:
                messagebox.showerror("Error", "Incorrect password!")
                password_entry.delete(0, tk.END)
                password_entry.focus()
        
        password_entry.bind('<Return>', lambda event: check_admin_login())
        
        tk.Button(login_frame, text="Login", command=check_admin_login, 
                 bg=self.get_theme_color("button_bg"), fg=self.get_theme_color("button_fg"), font=("Segoe UI", 11)).grid(row=1, column=0, columnspan=2, pady=10)
        tk.Button(login_frame, text="Cancel", command=login_window.destroy, 
                 bg=self.get_theme_color("button_bg"), fg=self.get_theme_color("button_fg"), font=("Segoe UI", 11)).grid(row=2, column=0, columnspan=2, pady=5)

    def admin_logout(self):
        self.is_admin_logged_in = False
        messagebox.showinfo("Logout", "Admin logged out successfully!")

    def init_clock(self):
        def update_clock():
            now = datetime.datetime.now()
            current_time = now.strftime("%Y-%m-%d %H:%M:%S")
            if hasattr(self, 'clock_label'):
                self.clock_label.config(text=current_time)
            self.root.after(1000, update_clock)
        update_clock()

    def submit_entry(self):
        name = self.name_entry.get().strip()
        date = self.date_entry.get_date().strftime("%Y-%m-%d")
        time_in = self.timein_entry.get().strip()
        reason = self.reason_entry.get().strip()
        now = datetime.datetime.now()
        time_out = now.strftime("%H:%M:%S")

        self.timeout_entry.config(state="normal")
        self.timeout_entry.delete(0, tk.END)
        self.timeout_entry.insert(0, time_out)
        self.timeout_entry.config(state="readonly")

        if not all([name, date, time_in, time_out, reason]):
            messagebox.showerror("Error", "Please fill all required fields.")
            return

        try:
            with open("visitor_log.csv", "a", newline="") as file:
                csv.writer(file).writerow([name, date, time_in, time_out, reason])

            self.name_entry.delete(0, tk.END)
            self.timein_entry.delete(0, tk.END)
            self.reason_entry.delete(0, tk.END)
            self.timeout_entry.config(state="normal")
            self.timeout_entry.delete(0, tk.END)
            self.timeout_entry.config(state="readonly")

            self.date_entry.set_date(datetime.date.today())
            self.timein_entry.insert(0, now.strftime("%H:%M:%S"))

            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(tk.END, f"Name: {name}\nDate: {date}\nTime In: {time_in}\nTime Out: {time_out}\nReason: {reason}")
            self.confirm_label.config(text=f"‚úÖ Entry recorded at {time_out}!")
            self.animate_transition("Confirm")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def perform_search(self):
        keyword = self.search_var.get().lower()
        self.search_results.delete(1.0, tk.END)

        if not os.path.exists("visitor_log.csv"):
            self.search_results.insert(tk.END, "No records found.")
            return

        with open("visitor_log.csv", "r") as file:
            reader = csv.reader(file)
            for row in reader:
                if any(keyword in col.lower() for col in row):
                    self.search_results.insert(tk.END, f"{' | '.join(row)}\n")

    def export_to_csv(self):
        if not os.path.exists("visitor_log.csv"):
            messagebox.showwarning("No Data", "No data to export.")
            return
        today = datetime.date.today().strftime("%Y%m%d")
        export_name = f"visitor_log_{today}.csv"
        os.replace("visitor_log.csv", export_name)
        messagebox.showinfo("Exported", f"Data exported to {export_name}")

    def export_to_pdf(self):
        if not os.path.exists("visitor_log.csv"):
            messagebox.showwarning("No Data", "No data to export.")
            return
        
        try:
            today = datetime.date.today().strftime("%Y%m%d")
            pdf_name = f"visitor_log_{today}.pdf"
            
            # Create PDF document
            doc = SimpleDocTemplate(pdf_name, pagesize=letter)
            elements = []
            
            # Add title
            styles = getSampleStyleSheet()
            title = Paragraph("Visitor Management System - Log Report", styles['Title'])
            elements.append(title)
            
            # Read CSV data
            data = [["Name", "Date", "Time In", "Time Out", "Reason"]]
            with open("visitor_log.csv", "r") as file:
                reader = csv.reader(file)
                for row in reader:
                    data.append(row)
            
            # Create table
            table = Table(data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, 0), 14),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            elements.append(table)
            
            # Build PDF
            doc.build(elements)
            messagebox.showinfo("PDF Exported", f"Data exported to {pdf_name}")
            
        except Exception as e:
            messagebox.showerror("Error", f"Failed to export PDF: {str(e)}")

# Run App
if __name__ == "__main__":
    root = tk.Tk()
    app = VisitorManagementApp(root)
    root.mainloop()
